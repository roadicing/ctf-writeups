#!/usr/bin/env python3

from pwn import *
from tqdm import tqdm
from hashlib import shake_128
from gmpy2 import mpz, is_prime

IP = b"mc.ax"
PORT = 31337

n = 20074101780713298951367849314432888633773623313581383958340657712957528608477224442447399304097982275265964617977606201420081032385652568115725040380313222774171370125703969133604447919703501504195888334206768326954381888791131225892711285554500110819805341162853758749175453772245517325336595415720377917329666450107985559621304660076416581922028713790707525012913070125689846995284918584915707916379799155552809425539923382805068274756229445925422423454529793137902298882217687068140134176878260114155151600296131482555007946797335161587991634886136340126626884686247248183040026945030563390945544619566286476584591
T = 2**64

def is_valid(x):
	return type(x) == int and 0 < x < n

def encode(x):
	return x.to_bytes(256, 'big')

def H(g, h):
	return int.from_bytes(shake_128(encode(g) + encode(h)).digest(16), 'big')

def verify(g, h, pi):
	assert is_valid(g)
	assert is_valid(h)
	assert is_valid(pi)
	assert g != 1 and g != n - 1
	m = H(g, h)
	r = pow(2, T, m)
	assert h == pow(pi, m, n) * pow(g, r, n) % n

'''
e = mpz(1)
for i in range(10**6):
    if is_prime(i):
        e *= i

g = pow(2, e, n)
h = 1

for _ in tqdm(range(10**6)):
    m = mpz(H(int(g), h))
    if e % m == 0:
        break
    g = pow(g, 2, n)
    e *= 2

r = pow(2, T, m)
pi = pow(2, -r * e // m, n)

verify(int(g), h, int(pi))

print(g)
print(h)
print(pi)

 11%|███████▏                                                         | 109941/1000000 [00:20<02:42, 5475.06it/s]
19522765540077893790867600416943511153658776978056736770087187362950938744210840831974217550318370990344669009969938309293952877556133475503631508153593513296275477029053018408816034667270503794985854452974949762856638111181120054976547168620170759973224225613183583232038679099619815888844174169346195432593660442434960687905835817005738415736838221025619460373828512504136813678185712095907810616635174341515044210622329906203216800942389101596509077803396408321762211357457302725236118702681637340211630677135118406592545915357451851032252769536106297475987911378856749307247220034600849764067933179121624255861898
1
10527353604616866743895051110162854921099083387807018062986121967312825287565811884572876931849531509193248318001408893284015679966759433136329416174325925654720966365773774662475437392567352918908635356871377905031236309225178637155623961057227685505455624002208437549386315879452627954781937378977421390292071415404869617118256129887837642050358307028823488989457862085619210260803519562186213989052055936287317432159418201326605028290932991836117128709230214976031913065350847689341135505357274534826761968962471149292171859632000617521953957014444116723324725966387192818950946695696514503826204946502489030071238
'''

g = 19522765540077893790867600416943511153658776978056736770087187362950938744210840831974217550318370990344669009969938309293952877556133475503631508153593513296275477029053018408816034667270503794985854452974949762856638111181120054976547168620170759973224225613183583232038679099619815888844174169346195432593660442434960687905835817005738415736838221025619460373828512504136813678185712095907810616635174341515044210622329906203216800942389101596509077803396408321762211357457302725236118702681637340211630677135118406592545915357451851032252769536106297475987911378856749307247220034600849764067933179121624255861898
h = 1
pi = 10527353604616866743895051110162854921099083387807018062986121967312825287565811884572876931849531509193248318001408893284015679966759433136329416174325925654720966365773774662475437392567352918908635356871377905031236309225178637155623961057227685505455624002208437549386315879452627954781937378977421390292071415404869617118256129887837642050358307028823488989457862085619210260803519562186213989052055936287317432159418201326605028290932991836117128709230214976031913065350847689341135505357274534826761968962471149292171859632000617521953957014444116723324725966387192818950946695696514503826204946502489030071238

io = remote(IP, PORT)

io.sendlineafter(b"g: ", str(g).encode())
io.sendlineafter(b"h: ", str(h).encode())
io.sendlineafter(b"pi: ", str(pi).encode())

io.interactive()

# dice{the_m1n1gun_4nd_f1shb0nes_the_r0ck3t_launch3r}