#!/usr/bin/env sage

from Crypto.Util.number import long_to_bytes

p = 7389313481223384214994762619823300589978423075857540712007981373887018860174846208000957230283669342186460652521580595183523706412588695116906905718440770776239313669678685198683933547601793742596023475603667
e = 31337
f = 7236042467316654159796543399639966340258093274047941788600980451877044636122969830708918356119442228154447395855689559447196348683125675305629837437591088260218138895919514078948650757100432223219969122629790
g = 1878626136321051642174045874618248475160620873585704351202865003185878331837410979441756843820270907300810543618813757245154196050399357659526631164136221434463496532263979506870318259276669412698827040743576

c = 871346503375040565701864845493751233877009611275883500035764036792906970084258238763963152627486758242101207127598485219754255161617890137664012548226251138485059295263306930653899766537171223837761341914356

assert pow(e, -2, p) == g
assert pow(e, -1, p) == f

P.<y> = PolynomialRing(GF(p)) # y = e^x
f = 110 * y + 313 * y^(-1) + 114 * y^(-2) - c

res = f.numerator().roots()[0][0]
x = Mod(res, p).log(Mod(e, p))

FLAG = long_to_bytes(x)
print(FLAG)

# CCTF{V33333rY_eeeeZy_DLP_cH41L3n9E!}