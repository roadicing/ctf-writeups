#!/usr/bin/env sage

from Crypto.Util.number import bytes_to_long, long_to_bytes

N = 23087202318856030774680571525957068827041569782431397956837104908189620961469336659300387982516148407611623358654041246574100274275974799587138270853364165853708786079644741407579091918180874935364024818882648063256767259283714592098555858095373381673229188828791636142379379969143042636324982275996627729079
ct = 3621516728616736303019716820373078604485184090642291670706733720518953475684497936351864366709813094154736213978864841551795776449242009307288704109630747654430068522939150168228783644831299534766861590666590062361030323441362406214182358585821009335369275098938212859113101297279381840308568293108965668609

p_upper = bytes_to_long(b'CCTF{it_is_fake_flag_')
p_lower = bytes_to_long(b'_90OD_luCk___!!}')

x_nbits = 27 * 8
p_lower_nbits = (p_lower.bit_length() + (8 - p_lower.bit_length() % 8))

P.<x> = PolynomialRing(Zmod(N))
f = (p_upper * 2^(x_nbits + p_lower_nbits)) + (x * 2^(p_lower_nbits)) + p_lower

res = int(f.monic().small_roots(X = 2^x_nbits, beta = 0.4)[0])

p = (p_upper * 2^(x_nbits + p_lower_nbits)) + (res * 2^(p_lower_nbits)) + p_lower
assert is_prime(p) and N % p == 0

q = N // p
d = inverse_mod(65537, (p - 1) * (q - 1))

pt = power_mod(ct, d, N)
FLAG = long_to_bytes(pt)
print(FLAG)

# CCTF{h0M3_m4dE_k3Y_Dr1vEn_CrYp7O_5ySTeM!}