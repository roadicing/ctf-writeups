#!/usr/bin/env python3

from pwn import *
from tqdm import tqdm

IP = "02.cr.yp.toc.tf"
PORT = 13771

'''
from z3 import *

def f(x):
    y = 0
    for i in range(len(x)):
        y += x[i] * (-2)**i
    return y

def mino_z3(n):
    if n % 3 == 1:
        return None
    x_list = [BitVec(f'x_{i}', n + 10) for i in range(n)]
    sol = Solver()
    sol.add(f(x_list) == 0)
    sol.add(Distinct(*x_list))
    _ = [sol.add(Or([x_list[i] == j + 1 for j in range(n)])) for i in range(n)]
    if sol.check() == sat:
        ans = sol.model()
        return [ans[x_list[i]].as_long() for i in range(n)]
    return False

ans_list = [mino_z3(i) for i in tqdm(range(3, 40 + 1))]
print(ans_list)

# 100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 38/38 [00:06<00:00,  6.03it/s]
# [[2, 3, 1], None, [2, 3, 5, 4, 1], [4, 2, 6, 1, 5, 3], None, [4, 8, 5, 7, 1, 3, 6, 2], [8, 2, 3, 4, 9, 6, 7, 5, 1], None, [8, 6, 5, 4, 3, 7, 9, 1, 11, 10, 2], [12, 6, 10, 3, 9, 7, 5, 8, 11, 4, 2, 1], None, [4, 14, 8, 13, 6, 10, 1, 12, 9, 7, 3, 2, 11, 5], [14, 11, 8, 1, 9, 13, 2, 7, 6, 15, 5, 3, 10, 12, 4], None, [14, 11, 10, 12, 8, 6, 16, 9, 15, 17, 13, 4, 2, 3, 7, 5, 1], [18, 9, 10, 11, 15, 12, 5, 17, 8, 4, 16, 1, 7, 13, 2, 3, 14, 6], None, [4, 2, 12, 18, 8, 7, 5, 1, 16, 14, 17, 13, 15, 10, 20, 11, 19, 9, 6, 3], [14, 19, 20, 11, 18, 16, 8, 4, 7, 1, 17, 3, 15, 13, 12, 5, 10, 21, 2, 9, 6], None, [10, 5, 16, 14, 13, 17, 18, 8, 15, 7, 6, 23, 22, 12, 19, 2, 11, 9, 21, 20, 1, 4, 3], [10, 3, 17, 7, 23, 24, 22, 6, 15, 18, 13, 12, 4, 16, 14, 11, 20, 2, 19, 5, 1, 8, 21, 9], None, [22, 17, 23, 18, 4, 8, 6, 7, 19, 2, 25, 10, 12, 15, 26, 13, 21, 14, 16, 3, 24, 11, 1, 5, 20, 9], [12, 16, 13, 24, 14, 8, 11, 6, 7, 21, 15, 25, 1, 5, 3, 17, 23, 19, 10, 18, 20, 22, 26, 27, 9, 4, 2], None, [22, 17, 5, 7, 3, 24, 6, 29, 26, 19, 9, 23, 27, 4, 18, 8, 21, 1, 15, 10, 16, 28, 12, 11, 25, 14, 20, 13, 2], [18, 9, 30, 27, 22, 4, 26, 12, 1, 19, 11, 21, 28, 23, 15, 10, 29, 13, 16, 14, 17, 3, 20, 7, 2, 8, 5, 25, 24, 6], None, [32, 22, 21, 11, 31, 15, 10, 19, 3, 4, 29, 23, 25, 26, 8, 16, 28, 12, 13, 24, 17, 2, 5, 7, 30, 6, 20, 14, 1, 18, 27, 9], [10, 27, 1, 31, 20, 3, 33, 28, 32, 13, 30, 17, 5, 12, 25, 22, 16, 19, 7, 8, 26, 29, 21, 4, 11, 6, 2, 23, 15, 14, 18, 24, 9], None, [34, 5, 20, 7, 33, 12, 3, 1, 35, 4, 9, 26, 17, 30, 19, 29, 31, 13, 6, 2, 22, 11, 16, 10, 15, 27, 32, 23, 14, 28, 18, 21, 25, 24, 8], [32, 30, 11, 28, 15, 23, 29, 31, 33, 21, 35, 27, 6, 2, 3, 25, 36, 12, 4, 20, 19, 9, 24, 7, 16, 17, 22, 13, 18, 10, 1, 34, 5, 14, 26, 8], None, [38, 11, 22, 13, 6, 9, 5, 37, 32, 19, 20, 1, 35, 21, 25, 34, 31, 30, 2, 28, 16, 26, 15, 33, 24, 14, 17, 18, 8, 29, 10, 4, 3, 36, 12, 23, 27, 7], [10, 37, 32, 30, 33, 29, 23, 9, 31, 13, 5, 15, 2, 38, 6, 27, 39, 11, 16, 20, 4, 3, 24, 35, 28, 8, 14, 1, 25, 18, 22, 12, 17, 26, 21, 36, 7, 34, 19], None]
'''

ans_list = [[2, 3, 1], None, [2, 3, 5, 4, 1], [4, 2, 6, 1, 5, 3], None, [4, 8, 5, 7, 1, 3, 6, 2], [8, 2, 3, 4, 9, 6, 7, 5, 1], None, [8, 6, 5, 4, 3, 7, 9, 1, 11, 10, 2], [12, 6, 10, 3, 9, 7, 5, 8, 11, 4, 2, 1], None, [4, 14, 8, 13, 6, 10, 1, 12, 9, 7, 3, 2, 11, 5], [14, 11, 8, 1, 9, 13, 2, 7, 6, 15, 5, 3, 10, 12, 4], None, [14, 11, 10, 12, 8, 6, 16, 9, 15, 17, 13, 4, 2, 3, 7, 5, 1], [18, 9, 10, 11, 15, 12, 5, 17, 8, 4, 16, 1, 7, 13, 2, 3, 14, 6], None, [4, 2, 12, 18, 8, 7, 5, 1, 16, 14, 17, 13, 15, 10, 20, 11, 19, 9, 6, 3], [14, 19, 20, 11, 18, 16, 8, 4, 7, 1, 17, 3, 15, 13, 12, 5, 10, 21, 2, 9, 6], None, [10, 5, 16, 14, 13, 17, 18, 8, 15, 7, 6, 23, 22, 12, 19, 2, 11, 9, 21, 20, 1, 4, 3], [10, 3, 17, 7, 23, 24, 22, 6, 15, 18, 13, 12, 4, 16, 14, 11, 20, 2, 19, 5, 1, 8, 21, 9], None, [22, 17, 23, 18, 4, 8, 6, 7, 19, 2, 25, 10, 12, 15, 26, 13, 21, 14, 16, 3, 24, 11, 1, 5, 20, 9], [12, 16, 13, 24, 14, 8, 11, 6, 7, 21, 15, 25, 1, 5, 3, 17, 23, 19, 10, 18, 20, 22, 26, 27, 9, 4, 2], None, [22, 17, 5, 7, 3, 24, 6, 29, 26, 19, 9, 23, 27, 4, 18, 8, 21, 1, 15, 10, 16, 28, 12, 11, 25, 14, 20, 13, 2], [18, 9, 30, 27, 22, 4, 26, 12, 1, 19, 11, 21, 28, 23, 15, 10, 29, 13, 16, 14, 17, 3, 20, 7, 2, 8, 5, 25, 24, 6], None, [32, 22, 21, 11, 31, 15, 10, 19, 3, 4, 29, 23, 25, 26, 8, 16, 28, 12, 13, 24, 17, 2, 5, 7, 30, 6, 20, 14, 1, 18, 27, 9], [10, 27, 1, 31, 20, 3, 33, 28, 32, 13, 30, 17, 5, 12, 25, 22, 16, 19, 7, 8, 26, 29, 21, 4, 11, 6, 2, 23, 15, 14, 18, 24, 9], None, [34, 5, 20, 7, 33, 12, 3, 1, 35, 4, 9, 26, 17, 30, 19, 29, 31, 13, 6, 2, 22, 11, 16, 10, 15, 27, 32, 23, 14, 28, 18, 21, 25, 24, 8], [32, 30, 11, 28, 15, 23, 29, 31, 33, 21, 35, 27, 6, 2, 3, 25, 36, 12, 4, 20, 19, 9, 24, 7, 16, 17, 22, 13, 18, 10, 1, 34, 5, 14, 26, 8], None, [38, 11, 22, 13, 6, 9, 5, 37, 32, 19, 20, 1, 35, 21, 25, 34, 31, 30, 2, 28, 16, 26, 15, 33, 24, 14, 17, 18, 8, 29, 10, 4, 3, 36, 12, 23, 27, 7], [10, 37, 32, 30, 33, 29, 23, 9, 31, 13, 5, 15, 2, 38, 6, 27, 39, 11, 16, 20, 4, 3, 24, 35, 28, 8, 14, 1, 25, 18, 22, 12, 17, 26, 21, 36, 7, 34, 19], None]

io = remote(IP, PORT)
for ans in tqdm(ans_list):
    if ans == None:
        io.sendlineafter("comma: ", "TINP")
    else:
        io.sendlineafter("comma: ", ','.join(map(str, ans)))

io.interactive()

# CCTF{MINO_iZ_4N_3a5Y_Crypto_C0d!n9_T4sK!}