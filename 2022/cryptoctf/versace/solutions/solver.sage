#!/usr/bin/env sage

from Crypto.Util.number import long_to_bytes

n, e, fi, th = (141886649864474336567180245736091175577519141092893110664440298696325928109107819365023509727482657156444454196974621121317731892910779276975799862237645015028934626195549529415068518701179353407407170273107294065819774663163018151369555922179926003735413019069305586784817562889650637936781439564028325920769, 65537, 125494383162828289973475117066203219587304356806057400173045477137700391356840397636206107925460433939119412469184723408274805651096828270461235114589209044543108910295997506041345432448035371092981112305692014036117962906342882215492784319467728201344342591126197621795974549431806828947671232171059809967991, 138257736445723754207239869344459794807808248188757696052272858978544083465381926995900887162870612185045399616892685750962667762789508194359878372465943702647287813020223160406789982302692329883577043521781397505345137392777694159916452699296748509096494301465498192136911589776144421856343483031920756519249)
c_1, c_2, c_3, c_4 = (88920444409754899592335110119456825172544580816901497880270628553955508488170483498726344301421934007876515783471747430111559265733377611608113080609941423596790625452564403457107243481310552344096683637970851198148957553062631972064855184560312748315536290880767375156429548232884895308088306625307674645678, 45539956581550314230977168288877082058214432324397034618326297663129864608739856352261029083496409133620455599376139981575342903237304167908534019438874239934645347320209162850653298515960349717851268830205737252263548268549179642907155075129172651815656517165432021020317138111104384072600486843574535899860, 69849817078368866947686316374564245958824276178721440086311727765763093314086243149277327430285562537315291446874425715021031882041090977200029684675392021083309757246079110723453995717856469919242618068208424495615283285085190255592463862108516827540775850882615540406750734639040903336048095547788528187976, 20285007564778647051596518902857046010716548094264173639037549746086538656814534621919993169453446815272789643882592631536755194356753848872566348635207131520597253599540337542405837637606323276917410384296602682043902830628022440639028040137219164743287397377174047728489836106561656239657061612908104843401)

'''
import math
from tqdm import tqdm
from Crypto.Util.number import sieve_base
from gmpy2 import gcd, isqrt, next_prime, powmod

# https://github.com/RsaCtfTool/RsaCtfTool/blob/master/attacks/single_key/pollard_p_1.py
def pollard_p_1(n):
    z = []
    logn = math.log(int(isqrt(n)))
    prime = sieve_base
    for j in range(0, len(prime)):
        primej = prime[j]
        logp = math.log(primej)
        for i in range(1, int(logn / logp) + 1):
            z.append(primej)
    try:
        for pp in tqdm(prime):
            i = 0
            x = pp
            while 1:
                x = powmod(x, z[i], n)
                i = i + 1
                y = gcd(n, x - 1)
                if y != 1:
                    p = y
                    q = n // y
                    return p, q
                if i >= len(z):
                    break
        return 0, None
    except TypeError:
        return 0, None

n = 141886649864474336567180245736091175577519141092893110664440298696325928109107819365023509727482657156444454196974621121317731892910779276975799862237645015028934626195549529415068518701179353407407170273107294065819774663163018151369555922179926003735413019069305586784817562889650637936781439564028325920769

sage: pollard_p_1(n)                                                                                                              
  0%|                                                                                                   | 0/10000 [00:00<?, ?it/s]
(mpz(106618752612001652530923691512073519044983443846656721126867402977583225110529),
 mpz(1330785123521532514359509094487948105481722504848965773375804447781588205324515194329765736256378554057968528437232706968968684612759533742691430481961760852226037539496501893899702482283213945758521272583786666322253325236336066561))
sage: p, t = pollard_p_1(n)                                                                                                       
  0%|                                                                                                   | 0/10000 [00:00<?, ?it/s]
sage: pollard_p_1(t)                                                                                                              
  0%|                                                                                                   | 0/10000 [00:00<?, ?it/s]
(mpz(104492689192892408108975038373966852967734827395344990285038653889732962680833),
 mpz(12735676857401163601385118447483795668229644118624917660231942016044435957817541173149617917604011645058841872384142319678290750015804888147769138207522817))
sage: q, r = pollard_p_1(t)                                                                                                       
  0%|                                                                                                   | 0/10000 [00:00<?, ?it/s]
sage: [is_prime(i) for i in [p, q, r]]                                                                                            
[True, True, True]
sage: assert p * q * r == n
sage: print(f"{p}, {q}, {r}")                                                                                                     
106618752612001652530923691512073519044983443846656721126867402977583225110529, 104492689192892408108975038373966852967734827395344990285038653889732962680833, 12735676857401163601385118447483795668229644118624917660231942016044435957817541173149617917604011645058841872384142319678290750015804888147769138207522817
'''

p, q, r = 106618752612001652530923691512073519044983443846656721126867402977583225110529, 104492689192892408108975038373966852967734827395344990285038653889732962680833, 12735676857401163601385118447483795668229644118624917660231942016044435957817541173149617917604011645058841872384142319678290750015804888147769138207522817

k = pow(c_1, inverse_mod(e, (p - 1) * (q - 1) * (r - 1)), n)
u = crt([discrete_log(Mod(c_2, i), Mod(5, i)) for i in [p, q, r]], [Mod(5, i).multiplicative_order() for i in [p, q, r]])
v = crt([discrete_log(Mod(c_3, i), Mod(13, i)) for i in [p, q, r]], [Mod(13, i).multiplicative_order() for i in [p, q, r]])
m = (c_4 * inverse_mod(Integer(power_mod(fi, u, n) * power_mod(th, v, n) * power_mod(k + 1, e, n)), n)) % n

FLAG = long_to_bytes(m)
print(FLAG)

# CCTF{8As3d_oN_f4c70r1n9_4nD_d15cr3tE_lOgaRiThM!}