#!/usr/bin/env sage

from Crypto.Util.number import long_to_bytes

e = 5078482198772022486668806580385994617046152136879757946447753006497559096311363698189927671279662282460215881884971383977603769421560651587643105884432120505614024093712045492181196774755153389551488415626903341200511584895756666520506685233571091301553677432797291383522948247421577307790421871576621793242903515091500045988509062949276333178982069574732477506029694357450058826765713
n = 10363021449027481978397698136523040156224840526536988813980447772289732568252796583569029480400841885971918279457292628777077494964266272306073795156837303451597151870070735534829041207628743246817464229192036030566123925737361164838906363407544870946204200850305741513829976332440459648804252085931138269521493971098766209511334573046832632919268929658929293913408444131177270388104753
N = 107392213553003652264193356141167842390327964666141411489753605300895389967717966219065325990583863026846677998499640622335255057106717292127317146400275358099599424428452765008928717339373244201449378568575832746100164090683550257574318731278439068909731202915200677410600049491303490567787820558996671108309423176089895240263790586705493906801778186252566858325220004019042683750828880339778401860112372011304892642369252185945127428055544519414082092350188418631467500702136331749454574303277689214044524567187394949387563389853123501460406372967215083941957639592408343405520031691298337072435702126794068748777393361487701429744483153095410562309113676977172598678391507488125481975026270733267725691293233008326251906894300961329722446578580183117531847748965008640
C = [[1946208174139816651741710263419547576592153126350801855142762133627913647508863455823382709899043259671094044028462261991810476672592342389139600583419037130249400429216051912147809156497388747490389535839278095179701275637029504452920313532785460709421810335322833683324583540542971635153116319417565879782567743525221686507906726087786621105169291168378964690052819764946613598283697, 1132182340479698114482383874952797406851835394503617195832358500522890480350948370033970794090094723318039532275191223723742462388681999900392328756181997298887891875712789491584405574822571967927609744519369790826014436738457000983543164898860473898076283762333186668689272789942682725689777116575064398495040777661209346469818796761610299917869552187462992078953932871607107940428566],
[7700452780560041441552917813890524163110993823471424265020074756508053970669942522256608739094119235303843336659577921739326977145056801702083374978356129281255531665001370179699899093743464696424465158478872708449905227751200590864428048833098665065609353140089197777268079240074549285218684722855590774839476140179718516214563523243006229792289296462740200370706099145614178211440202, 7782708893953874570747318809245408011800629307006741721998241910864916749737624604100584864398704986546325867550058017705502633594608936861884411666933396887981901979859722266987588797058800525120021500545010297268991183937262790320218011315696953115130360268521260963297555084965631546139006069842106143556094168429235033227360856462499208085105421810405108260458185350930612978313221]]

k = 2

def find_GL_order(p, k):
    order = 1
    for i in range(k):
        order *= (p^2 - p^i)
    return order

if __name__ == "__main__":
    p, q = var('p q')
    sol = solve([p * q - n, (p^k - 1) * (q^k - 1) - N], p, q, solution_dict = True)

    p = ZZ(sol[0][p])
    q = ZZ(sol[0][q])

    dp = find_GL_order(p, 2)
    dq = find_GL_order(q, 2)

    d = inverse_mod(e, dp * dq)

    C = matrix(Zmod(n), C)
    _C = C^d

    l_max = len(str(2^(n.nbits()) - 1))
    for l in range(l_max - 2, l_max + 1): # brute-force `l` to determine how many `0s` need to be filled in the MSB of each item.
        _c = str(_C[0][0]) + str(_C[0][1]).rjust(l // 2 - l // 4, '0') + str(_C[1][0]).rjust(3 * l // 4 - l // 2, '0') + str(_C[1][1]).rjust(l - 3 * l // 4, '0')

        c = ZZ(_c)
        m = power_mod(c, d, n)

        FLAG = long_to_bytes(m)
        print(FLAG)

# ASIS{m4Tr!X_M0D1fIcA7iOn_0F_RSA_12431!}